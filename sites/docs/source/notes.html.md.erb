---
layout: layout-coeur-knowbase
title: Notes
type: notes
source: ./

home: true
sidebarTitle: Notes
sidebarCaption: so many thoughts

submenu:
- [Todo, todo]
- [Breaking Changes, breaking-changes]
- [Ideas, ideas]
- ["- Writing Topics", writing-topics]
- ["- Email", email]
- ["- Landing Pages", landing-pages]
- ["- Build System", build-system]
- ["- Documentation", documentation]
- ["- Cool Stuff", cool-stuff]
- ["- Wireframer", wireframer]
- ["- Interactive", interactive-prototyping]
- ["Other Stuff", other-stuff]
- ["- Code", code]
- ["- Design", design]
- [Crap, crap]
---

<div class="" markdown="1">

<aside class="_float-right _width-site-min _margin-left _margin-bottom-2 _color-bg-ui-light">
  <%= partial '/partials/coeur-changelog' %>
</aside>

## Notes

These notes won't make sense to anyone but me, and that's ok.

---

### Todo



- form design examples
  - https://medium.com/techtrument/bye-bye-material-design-acaebcc7c6b4

- more page design exampels
  - https://github.com/ibm/css-gridish

- `--required` flag missing from form fields
  - * or other design to show a field is required


- Loader
  - add a loader section
  - explain using font-awesome loaders (easiest)

- Project Cheat Sheet — explain how everything works, fits together
  - NEW SECTION, don't cram into the design system section
  - probably move stuff out of design system
  - explain middleman / why middleman
  - explain design system, wireframe / PUG system
  - build system
  - better way of laying out the homepage
    - Github
    - Copy Stylecoeur
    - Readme + Changelog
    - Keeping Notes + Todo
    - Optional: styleguide

github deployment
  - cname file
  - how github deployment works
  - **.github.io trap / how to deploy vs. repo
  - jekyll vs. middleman deploy
  - set up A records hint
  - 

-Mixins
  - document all mixins, esp. for animation
    - ease
    - highlight color
    - no select
    - other random stuff


- quickly explain !default in helpers:
  - $color-main: blue !default
    - w/o default- will override previous definition of $color-main
    - w/ default- will only define $color-blue if previously has not been defined (good for setting base framework stuff, so you don't steamroll local variables)

On building Middleman prototypes:
- to keep things sketchy, use rough.js
  - https://roughjs.com/

Note on keeping your CSS neat [Samsung](https://medium.com/samsung-internet-dev/success-with-css-33215f481422)



- Reorg the writing around Coeur being a new Design &amp; Build system, around the npm module etc.
- Build out a readme.md w/ npm instructions, make it more clear
- Turn 'tools' into a better collection of useful tools; add a cool thing to it, create tags for each
- would be cool if tools could be inserted into other sections
- show/hide code; default to hidden b/c hard to read

- add `--pinned` to Sticky section as a browser-supported alternative
  - pinned should never be a core feature; can't trust
- add contextual styling options for a lot of the elements like `--primary`, `--secondary`, `--tertiary`
  - [Example](https://medium.com/refactoring-ui/7-practical-tips-for-cheating-at-design-40c736799886)
  - buttons, headers, borders, cards / message boxes, etc.
  - instead of defining typography from a h1, h2 etc... define like z-index the relative importance
    - will make it easier to define things
- visual updates
  - fewer borders
- do a center underline hover thing (bc everyone is doing it!)
  - http://www.gv.com/team/ nav example

- Iconography: add a note about including SVG
  - height, width, and preserve aspect ratio
  - using a templater / partial to add these
  - `preserveAspectRatio`
  - Mention AwesomeFonts v4, v5
    - cheat sheet


#### Breaking Changes
  - rename
    - pointer events like `_default` to `_pointer-default`
    - rename `height--` in coeur to something better
    - really need to change inconsistent _ and -- helpers, which will be breaking :\
      - _right vs. _align-right
    - buttonGroup > button_group
    - border-thin --medium — super inconsistent and annoying
    - instead of -small etc. adopt --sm, --md, --lg, --xl
    - _width-full vs. --width-full
  - collapsible code area for styleguide; code is super annoying on some pages
  - update tables with example:
    - .--highlight-body-none.--spacing-medium 
    - weird blocker problem in example that doesn't appear in the peertutor
      - on mobile, horiz scroll blocker moves?!


#### Project Documentation System

Documentation system - should be done soon, take into account design process/decisions, will help future decision-making and review

- How to document decisions? How to take notes, and where is it appropriate?
- Change log
- Build tool to take screenshots of old designs; easier to review changes 
  - https://github.com/danielhusar/gulp-local-screenshots






---

### Ideas


#### Writing Topics

- Toolbox and Checklist - make your life easy
  - basis for stylecoeur / designcoeur / scriptcoeur
  - for freelancers
  - Create your own tools and checklists for future projects
  - Style guide and design systems
  - Brands, design thinking
  - Your own box of tools; spring board to get you working on the important / fun aspects of client work
- talk about going serverless: https://thepowerofserverless.info/services.html
- SSL section
  - SSL as public trust
  - cloudflare SSL
  - open SSL
  - subdomain * SSL
  - deployment methods
  - surge.sh SSL


#### Email

- Email development, design, tools
  - https://designmodo.com/create-send-email-newsletters/

- handling mail / setup
  - subscriptions: mailchimp
  - mailing out: mailgun
    - github spam warning!!!
  - tinyletter


#### Search

- Middleman search?
  - yeah find a way to search these flat files
- Algolia search





#### Landing Pages

Especially their relevance to Griddick

- landing pages [papaya](https://www.eatapapaya.com/)
- Gridded Landing pages 
  - look at popular sites and recreate the top 20 popular layouts in grids
  - create a new grids section for all those things, and share it online
    - mobile and desktop
  - vertical grids w/lineheight, not perfect vgrids





#### Build System

Stop reinventing things
Add a project deployment section, esp. with the new build system
- Going serverless

- add more details to build system
- functional design page
  - every project should have its own stylesheet page that includes all the design variations
  - a much simpler distillation of the "real" styleguide


#### Documentation

- [http://dimerapp.com](http://dimerapp.com/)


#### Cool Stuff

- [Spotify Coordinator SVG Handler](https://github.com/spotify/coordinator)
- [sound / audio visualizers](https://tympanus.net/codrops/2018/03/06/creative-audio-visualizers/)


#### Wireframer

- "wireframe" styles — use the redacted and blokk fonts to creates ungly, blocked out wireframes with html; follows grid and patterns
- style switching

- Add writeup
- Wireframes
  - give each a display name
  - flowchart / overview system?
  - includes and partial wireframe elements
  - sidebar / collapsible comments
  - separate wf template pages from the actual wf
    - allows multiple wfs on a page, and add a tabber/switcher; supports multiple states and template inclusion
- Jade/PUG.js-like module generator for wireframes
  - https://arstechnica.com/gadgets/2018/01/
  - can use Vue to stitch them together interactively
  - design system wireframe tool / design frame tool
  - with-ink-to-code-microsoft-is-turning-back-of-napkin-sketches-into-software/
  - goal is to quickly convert specs to usable 'wireframe' html pages built by stylecoeur blocks
- toggleable digital wireframes
  - reduce detail
  - copy
  - colors
  - squiggliness

- I like how they present their wireframe components on [Mollie](https://blog.mollie.com/on-design-workflow-a76061c3e4f0)

#### SEO

SEO and meta guide:

- meta head.erb layout generator using a current_page.data erb properties
- https://www.seooptimizationguide.com/technical-seo/
  - prods: sitemap xml editor, meta tag editor
  - http://www.heymeta.com/
      - but also show facebook / twitter variations
          - [Facebook](https://developers.facebook.com/tools/debug/sharing/?q=http%3A%2F%2Fwww.heymeta.com%2F)
      - can get a generated page up w/ custom meta tags
          - dynamically check generated meta tags on the fly using fb’s tool
      - [Facebook](https://developers.facebook.com/tools/debug/sharing/?q=http%3A%2F%2Fwww.heymeta.com%2F)
      - [Twitter checker](https://developer.twitter.com/en/docs/tweets/optimize-with-cards/overview/abouts-cards)
      - iFrames as checkers


#### Interactive Prototyping

- app Coeur
- Vue / vuex / Apollo / UX Prototyping
  - create a micro app / micro service development framework, much like stylecoeur 
  - interchangeable, independent &amp; isolated components / can be styled w/ stylecouer
  - can be dropped ANYWHERE into a static site and provide interactivity
  - similar to the chat tools out there
  - future tools:
    - Feedback &amp; Conversion tool (refer to MassiveSci feedback tree)
    - UX walkthrough tool — ask questions; guide users; highlight stuff on the page
    - Payment tool
    - Donation tool

- reusable GQL based off of danceydance
  - simplify the way GQL requests are written (lots of redundancy)
- Axios / REST examples
  - https://alligator.io/vuejs/rest-api-axios/

- basic react pages, accounts pages, etc. use jststrt as a start
  - basic user stories and pages!
  - account, login, signup, password recovery, etc.

- stylecoeur for ux prototyping
  - site and relation map
  - page layout map / show all the pages, like invision or powerpoint edit mode
  - [ui wireframing example](https://medium.com/proof-of-concept/growing-free-ux-design-tool-prototype-with-ui-wireframing-and-user-scenarios-f2b0015516ef)

- responsive, [dynamic components](https://philipwalton.com/articles/responsive-components-a-solution-to-the-container-queries-problem/)


#### Typography


typography: smoothing
- when it's good, when it doesn't look good (Affects readability)
- mixin; use selectively (light on dark vs. dark on light; serif fonts like Georgia)
-     -webkit-font-smoothing: antialiased;

- clear typgraphic size rules list / table
  - refer to [carbon](http://carbondesignsystem.com/style/typography)
- or use a mix of sizes (font-big) and then contextual sizing (font-important, font-ui, etc.)?
- establish a base font and size (for you it's system @ 1em / 16px)
- fewer options create a stricter framework
  - no coming up with custom sizes
  - [salesforce](https://www.lightningdesignsystem.com/guidelines/typography/)
- typographic scales
- Font-family
- Sizes of all the headlines and body text
- Line-height / established baseline for other stuff as well
- Font weights
- Basic text color  

- then show what these look like in example environments (UI panels, menus, buttons/cards, and large swaths of text)
- [harmonious scales?](http://type-scale.com/)

on design + typography:
 - p 98 thinking with type: " style sheets compel designers to think globally and systematically instead of focusing on the fixed construction of a particular surface" - as opposed to 20th century artists and designers who integrated form and content; and "used typography to create texts whose content was inextricable from the concrete" layout of specific letterforms
 - don't fall into the trap of the modular adaptive system + distancing away from old typography
 - using js and/or css, getting deviceheight and devicewidth we can understand the limits of the screen
 - headlines subheads, and such can be precisely set based on the dimensions of the particular screen
 - responsive design with play with forms, alignment, space and meaning...



#### Chatbots

- Chatbots, chat window, and chat-like design
- [Best practices](https://medium.com/@eunjinnyseo/11-more-best-ux-practices-for-building-chatbots-67362d1104d9)
- Chatbots are the new phone trees.
- MassiveSci feedback example



#### Other Ideas

- voting / comparison tool
  - [A or B?](https://www.designernews.co/stories/92421-fellow-designers-would-you-find-this-tool-useful-or-utterly-pointless#comment-285783)

- stylecoeur style cards https://www.greatsimple.io/
- HTML / CSS grid versions for all their templates—sell them eventually
- manyways.design
  - many ways to skin a website
  - here’s css grids and react components (backed by stylecoeur)
  - lots of stuff for free, but also full access download / one time fee
- coding style and linting; enforcing syntax

- Onboarding section: [user onboarding article](https://www.appcues.com/blog/user-onboarding-best-practices/)

- Progressive image loading / on page load
- Masonry
- scroll-fade-in-load effect (wordpress thing)
- menu: open, hiden, transition: https://www.skinn.be/en/work/salt
- menu slide down to hide; slide up to show: https://www.skinn.be/en/work/salt
- microservices and express api hookup
- page transition techniques



---

### Other Stuff

#### Code

- Explore CSS variables
  - Create a section for it, and how you can use it
  - e.g. for theme switching
  - tie colors in with a --colors var?
  - [hover effects](https://blog.prototypr.io/stunning-hover-effects-with-css-variables-f855e7b95330)
  - [css var theming](https://medium.freecodecamp.org/how-to-easily-create-themes-with-css-variables-2d0f4cfa5b9a)
- figure out how to adapt ResizeObserver
- Investigate useful window.js functions
  - window.crypto.getRandomValues(typedArray)
- compare to undefined: if(result === undefined)
- JS primer / ES5 vs. ES6 
  - data objects, arrays
  - iterators; object.key etc.
  - common patterns
  - JSON to/from 
  - ES6 best practices
    - always pass in objects!
    - destructuring
    - for in looping
  - map/filter/reduce
    - https://medium.com/@joomiguelcunha/learn-map-filter-and-reduce-in-javascript-ea59009593c4
  - for of vs. foreach vs. Object.keys mapping (old JS; foreach does this,)
  - Object.assign vs. {... rest} operator to glom on stuff to an object
  - check if key exists in object: if ('key' in myObj)
- add to local storage section:
  - session storage
  - [indexDB helpers](https://medium.freecodecamp.org/a-quick-but-complete-guide-to-indexeddb-25f030425501)
  - CDN w/ promises version: https://github.com/jakearchibald/idb
- SSL section
  - SSL as public trust
  - cloudflare SSL
  - open SSL
  - subdomain * SSL
  - deployment methods
  - surge.sh SSL

- Cheat Sheet
  - set timeout
  - repeat timer
  - ajax / promise
  - throttle
  - lodash helpers (useful)



#### Design

- [design basis and purpose-driven design](https://medium.com/expand-the-room/the-eight-principles-of-purpose-driven-design-e7d05111701b)
- [information architecture primer](https://blog.prototypr.io/the-comprehensive-guide-to-information-architecture-29b09695fbcb)
- [design cheat sheet sketch](https://medium.com/sketch-app-sources/design-cheatsheet-274384775da9)
- forms
  - borrow ideas from [google forms](https://docs.google.com/forms/d/1rNTuD542eh3ZLQhhvlnn64h1oZV6X3NWvtvZdx4O86g/viewform?edit_requested=true)



---

### Crap and Ideas


#### Grid Template Builder
- css grid template builder
- possible to use js to set css variable names now
- simple interface to "draw" the template
- set the names of the fields in js
- then spit out a generated css code

generalized cascading animations
- can use sister selectors to generalize lag for animations [Dropinks](http://www.dropinks.com/notification-list-using-css3/)

- save file to disk
  - generate files to save
  - Blob API
  - [How to do this / MSDN](https://msdn.microsoft.com/en-us/library/hh779016(v=vs.85).aspx?ranMID=24542&ranEAID=TnL5HPStwNw&ranSiteID=TnL5HPStwNw-xrF7m4Sqx._z09YGiAcLWA&tduid=(f21a30053d78af6de7bef75d2d60807c)(256380)(2459594)(TnL5HPStwNw-xrF7m4Sqx._z09YGiAcLWA)())


- start making dynamic generator components like colors. [Example](https://dotcolors.co/?colors=%23abcde1%2C%23d9dd92%2C%23eabe7c%2C%23e06e43%2C%23311e10%2C%23140603)

- add Style Guide Guide
  - Pros
  - Cons
    - Keeping logs, notes and changelog detailed and up to date is very hard, something I struggle with; documentation debt
    - Like doing the dishes, it has to be treated like a chore

- boilerform: https://boilerform.design/
  - take all the examples and missing form things


[We need to talk abou Patterns](https://blog.prototypr.io/we-need-to-talk-about-patterns-8dcc73aff318)




- connect to airtable style guide 
  - define the style guide API in the style guide
    - meta style guide!
  - API (or teeny.io cms idea)

check out: https://www.imgix.com/


add pure css loader placeholder for a div block
_loader would be useful

make to look more like [relay docs](https://facebook.github.io/relay/docs/en/thinking-in-graphql.html)

[avoiding unexpected routine in a design system](https://medium.com/@kamushken/developing-a-design-system-how-to-avoid-unexpected-routine-a7fbe2766391)

[project] / system / component -- state
- coeur.style.input.active
- or coeur-style-input--active
- or shorthand: input --active


[Vue Storybook](https://storybook.js.org/examples/)



### Next Up


- refer to [corpus](http://jamiewilson.io/corpus/) for structure and missing parts
- refer to [Firefox Photon](http://design.firefox.com/photon/welcome.html) for style guide content and structure
- refer to [Shards](https://designrevision.com/demo/shards) for possibly better implementations 

- Core definition writeup / make clearer
  - sizer: don't use data-vheight, just use a _vheight-50 etc.
  - griddick
    - mixin generator
    - update "-always" behavior / better name; one col is default behavior, force that to not happen; use a generator wrapped around a (:not(unless)) kind of thing
  - Layout
    - Sizing / Spacing
      - explanation of mobile- everything becomes a single column unless explicitly not 
    - Grids, Baseline
    - Flexbox Content positioning / update Gridding
    - Whitespace
    - Alignment
    - vh / vh helper / sizer
    - EXAMPLE LAYOUTS / popular layouts
- Footnote
  - JS duplicator to put footnotes at the bottom of a page

- new project cheat sheet / quick way to launch new static site projects
  - how to copy
  - setting up stylecoeur
  - setting up github
  - setting up domains / A records
  - setting up mailchimp, mailgun
  - setting up contact form





</div>

