---
layout: layout-styleguide
title: styleguide
source: ./
---

<main markdown="1">
  
# Hello, Sassypants.

This "Style Guide" (or cheat sheet) is a collection of loosely nested dependent components and elements. The basic ones are built with SCSS, and complex ones with SCSS + JS.
- Each component needs to be as independent as possible. 


## File Organization




## Class Naming

Naming convention is inspired BEM and exists to keep all elements and components organzied. These are not hard and fast rules, and they may even be broken sometimes... but it's good to have some semblance of organization.

I prefer my own simplified version of BEM syntax: [http://getbem.com/introduction/](http://getbem.com/introduction/)


### Naming
- ```element``` Element class name like ".form_one" or ".message_cta" 
- ```_component``` Styling component like Button, Form, etc. denoted with a leading underscore
- ```_component_name_one``` Long multi-word names uses underscore 
- ```_component--attribute``` Attributes are descriptors of the element or the component, like a 'container' or  'element--intro' to describe a certain part. Sometimes naming can feel 'flipped' for example a sub-footer would be named 'footer--sub'
- ```_component-minor-cascading-attribute``` Cascading attributes are denoted with a simple dash. ```._color-bg-yellow``` defines a color component, the effect (bg), and yellow, or ```._font-sans``` defines a font component, sans-serif. I guess this follows the French way of following a noun with adjectives. (It's my preference!)
- ```--state``` States describe the component or element, and are "floating" - in BEM these are ```.button--state-success``` but I prefer separating state from the element or component. This way you can reuse the --state flag for different elements and components, like ```._form --success``` and ```._button --success```


### Usage

The style guide is very modular, so only link the SCSS components you need.


#### Static Copy

__Preferred Usage.__ Copy the full `styles` folder over to a new project. If the core changes, just make sure to copy the newest one over. Eventually there might be a build task to ensure it stays up to date. This method is preferred, as it prevents accidental changes to the core.

#### Symlink

Create a symlink to this project from your project, which gives you control of editing the core. This is powerful but dangerous, since changes might ripple across projects. Don't forget that @importing a folder in SCSS automatically imports the index.scss file, if one exists. NOTE: right-click to create an alias doesn't always work, so use the CLI instead.

Using the command-line interface, go to your new project's SCSS folder, then:

Creating a symlink file: 

~~~
ln -s ~/path/to/stylecoeur_folder/styles/index.scss _stylecoeur.
~~~

Note how the name is changed to ```_stylecoeur.scss``` to conform to SCSS naming standards, but it doesn't really matter.

Creating a symlink folder in CLI. Navigate to the project's stylesheet folder: 

~~~ 
ln -s ~/path/to/styles/stylecoeur_folder stylecoeur
ln -s /Users/janzheng/Desktop/projects/stylecoeur/styles stylecoeur
~~~


I prefer the latter option, because you can now import the folder as a whole:

~~~
@import 'stylecoeur/stylecoeur.scss';
~~~

or pick specific compontents 

~~~
@import 'stylecoeur/components/form';
~~~

(Symlinks are simpler than using an npm module, since not all projects might even use npm or such)





### Running the Guide

The documentation is written in a combination of ERB, Kramdown (variant of Markdown), and HTML, supported by SCSS.
Go to the source/ folder and use the following commands. Note that the source example uses a symlink itself. The site is built on top of [Middleman](http://middlemanapp.com)

~~~
bundle exec middleman server
~~~

then preview on `http://localhost:4567`


Compiling the example:

~~~
bundle exec middleman build
~~~




### HTML

`< element class="element _component_name --state_1 --state_2 ></element>`

### Tips
- using the `-` dash to separate names and descriptors helps with double-click selecting the entire name, whereas underscores are included in the selection, dashes are not. The original BEM syntax ```.my-component__list-item``` is annoying b/c double clicking the component name selects the wrong parts of the name. Instead, give it the name of ```.my_component--list_item``` allows you to select the right parts with a simple double-click
- In your SCSS, avoid the use of &--state as much as possible, as these are hard to search for with cmd-f
- Keep reusability and extensibility in mind





Other style guides:

- [Trello](https://design.trello.com/)
- [Mailchimp](https://ux.mailchimp.com/)
- [Corpus](http://jamiewilson.io/corpus/)

</main>

</main>

